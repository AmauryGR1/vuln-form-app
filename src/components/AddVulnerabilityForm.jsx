import React, { useState, useEffect } from "react";
import {
  Stepper,
  Step,
  StepLabel,
  Button,
  Typography,
  Box,
  TextField,
  IconButton,
  List,
  ListItem,
  InputAdornment,
  Divider,
  MenuItem,
  Grid,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import { Add, Delete, Image, TextFields } from "@mui/icons-material";
import StatusChip from "./StatusChip";
import ReactQuill from "react-quill";
import "./QuillStyle.scss";

const steps = [
  "Exploit",
  "Proof of Concept",
  "Steps for Recreation",
  "Recommendations",
  "Locations & Occurrences",
  "Resources",
];

const AddVulnerabilityForm = ({
  formData,
  setFormData,
  selectedExploit,
  setSelectedExploit,
  exploits,
}) => {
  const [activeStep, setActiveStep] = useState(0);
  const handleNext = () => setActiveStep((prev) => prev + 1);
  const handleBack = () => setActiveStep((prev) => prev - 1);

  useEffect(() => {
    console.log(formData);
  }, [formData]);

  const VisuallyHiddenInput = styled("input")({
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: 1,
    overflow: "hidden",
    position: "absolute",
    bottom: 0,
    left: 0,
    whiteSpace: "nowrap",
    width: 1,
  });

  const toolbarOptions = [
    ["bold", "italic", "underline", "strike"], // toggled buttons
    [{ list: "ordered" }, { list: "bullet" }],
  ];

  const handlePOCAdd = (type) => {
    setFormData((prev) => ({
      ...prev,
      poc: [...prev.poc, { type, content: "", caption: "" }],
    }));
  };

  const handlePOCChange = (index, key, value) => {
    const newPoc = [...formData.poc];
    newPoc[index][key] = value;
    setFormData({ ...formData, poc: newPoc });
  };

  const handleStepChange = (index, value) => {
    const newSteps = [...formData.steps];
    newSteps[index] = value;
    setFormData({ ...formData, steps: newSteps });
  };

  const handleOccurrenceChange = (index, value) => {
    const newOccurrences = [...formData.occurrences];
    newOccurrences[index] = value;
    setFormData({ ...formData, occurrences: newOccurrences });
  };

  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <Box sx={{ display: "flex", flexDirection: "column", gap: 2, p: 2 }}>
            <TextField
              select
              fullWidth
              size="small"
              label="Select Exploit"
              value={formData.exploitId}
              onChange={(e) => {
                const exploit = exploits.find(
                  (x) => x.id === parseInt(e.target.value)
                );
                setFormData({
                  ...formData,
                  exploitId: e.target.value,
                  recommendation: exploit?.recomendation || "",
                  resources: exploit?.resources || "",
                });
                setSelectedExploit(exploit); // Update the selected exploit
              }}
            >
              {exploits.map((exp) => (
                <MenuItem key={exp.id} value={exp.id}>
                  {exp.name}
                </MenuItem>
              ))}
            </TextField>
            {selectedExploit ? (
              <Box mt={2}>
                {/* Severity */}
                <Typography
                  sx={{ fontWeight: "bold", color: "text.primary", mt: 2 }}
                  variant="body2"
                  gutterBottom
                >
                  Severity
                </Typography>
                <Typography
                  sx={{ color: "text.secondary" }}
                  variant="body1"
                  gutterBottom
                >
                  <StatusChip label={selectedExploit.severity} size="small" />
                </Typography>
                {/* Description */}
                <Typography
                  sx={{ fontWeight: "bold", color: "text.primary", mt: 2 }}
                  variant="body2"
                  gutterBottom
                >
                  Description
                </Typography>
                <Typography
                  variant="body1"
                  sx={{ color: "text.secondary" }}
                  dangerouslySetInnerHTML={{
                    __html: selectedExploit.description,
                  }}
                />
                {/* Recomendations */}
                <Typography
                  sx={{ fontWeight: "bold", color: "text.primary", mt: 2 }}
                  variant="body2"
                  gutterBottom
                >
                  Recomendations
                </Typography>
                <Typography
                  variant="body1"
                  sx={{ color: "text.secondary" }}
                  dangerouslySetInnerHTML={{
                    __html: selectedExploit.recomendation,
                  }}
                />
                {/* Recomendations */}
                <Typography
                  sx={{ fontWeight: "bold", color: "text.primary", mt: 2 }}
                  variant="body2"
                  gutterBottom
                >
                  Resources
                </Typography>
                <Typography
                  variant="body1"
                  sx={{ color: "text.secondary" }}
                  dangerouslySetInnerHTML={{
                    __html: selectedExploit.resources,
                  }}
                />
              </Box>
            ) : (
              <Typography
                variant="body2"
                gutterBottom
                sx={{ color: "text.secondary", pt: 4, textAlign: "center" }}
              >
                Please select an exploit to start.
              </Typography>
            )}
          </Box>
        );
      case 1:
        return (
          <Box sx={{ display: "flex", gap: 2, p: 2, flexDirection: "column" }}>
            <Box sx={{ width: 1 }}>
              {formData.poc.map((section, index) => (
                <Grid
                  container
                  spacing={2}
                  sx={{
                    width: 1,
                    borderBottom: 1,
                    p: 2,
                    borderColor: "divider",
                  }}
                  key={index}
                >
                  <Grid size={11}>
                    {section.type === "text" ? (
                      <ReactQuill
                        theme="snow"
                        value={section.content}
                        modules={{
                          toolbar: toolbarOptions,
                        }}
                        onChange={(val) =>
                          handlePOCChange(index, "content", val)
                        }
                      />
                    ) : (
                      <Box sx={{ display: "flex", gap: 2 }}>
                        {formData.poc[index].content ? (
                          <Button
                            size="small"
                            variant="contained"
                            disabled
                            startIcon={<Image />}
                            sx={{
                              width: "250px",
                            }}
                          >
                            {formData.poc[index].content.name}
                          </Button>
                        ) : (
                          <Button
                            size="small"
                            component="label"
                            role={undefined}
                            variant="contained"
                            tabIndex={-1}
                            startIcon={<CloudUploadIcon />}
                            sx={{ width: "250px" }}
                          >
                            Upload files
                            <VisuallyHiddenInput
                              type="file"
                              accept="image/*"
                              onChange={(e) =>
                                handlePOCChange(
                                  index,
                                  "content",
                                  e.target.files[0]
                                )
                              }
                            />
                          </Button>
                        )}

                        <TextField
                          fullWidth
                          size="small"
                          label="Caption"
                          value={section.caption}
                          onChange={(e) =>
                            handlePOCChange(index, "caption", e.target.value)
                          }
                        />
                      </Box>
                    )}
                  </Grid>
                  <Grid size={1}>
                    <IconButton
                      size="small"
                      color="primary"
                      onClick={() => {
                        const newPoc = formData.poc.filter(
                          (_, i) => i !== index
                        );
                        setFormData({ ...formData, poc: newPoc });
                      }}
                    >
                      <Delete />
                    </IconButton>
                  </Grid>
                </Grid>
              ))}
            </Box>
            <Box sx={{ width: 1, display: "flex", ga1: 1 }}>
              <Button
                size="small"
                variant="outlined"
                startIcon={<TextFields />}
                onClick={() => handlePOCAdd("text")}
                sx={{ mr: 1 }}
              >
                Add Text
              </Button>
              <Button
                size="small"
                variant="outlined"
                startIcon={<Image />}
                onClick={() => handlePOCAdd("image")}
              >
                Add Image
              </Button>
            </Box>
          </Box>
        );
      case 2:
        return (
          <Box>
            {formData.steps.map((step, i) => (
              <Box key={i} display="flex" alignItems="center" gap={3} mb={2}>
                <TextField
                  fullWidth
                  size="small"
                  label={`Step ${i + 1}`}
                  value={step}
                  onChange={(e) => handleStepChange(i, e.target.value)}
                />
                <IconButton
                  size="small"
                  color="primary"
                  onClick={() => {
                    const newSteps = formData.steps.filter(
                      (_, idx) => idx !== i
                    );
                    setFormData({ ...formData, steps: newSteps });
                  }}
                >
                  <Delete />
                </IconButton>
              </Box>
            ))}
            <Button
              size="small"
              variant="outlined"
              startIcon={<Add />}
              onClick={() =>
                setFormData({ ...formData, steps: [...formData.steps, ""] })
              }
            >
              Add Step
            </Button>
          </Box>
        );
      case 3:
        return (
          <ReactQuill
            theme="snow"
            value={formData.recommendation}
            modules={{
              toolbar: toolbarOptions,
            }}
            onChange={(val) =>
              setFormData({ ...formData, recommendation: val })
            }
          />
        );
      case 4:
        return (
          <Box>
            {formData.occurrences.map((loc, i) => (
              <Box key={i} display="flex" alignItems="center" gap={2} mb={1}>
                <TextField
                  fullWidth
                  size="small"
                  label={`Location ${i + 1}`}
                  value={loc}
                  onChange={(e) => handleOccurrenceChange(i, e.target.value)}
                />
                <IconButton
                  size="small"
                  color="primary"
                  onClick={() => {
                    const newOccurrences = formData.occurrences.filter(
                      (_, idx) => idx !== i
                    );
                    setFormData({ ...formData, occurrences: newOccurrences });
                  }}
                >
                  <Delete />
                </IconButton>
              </Box>
            ))}
            <Button
              size="small"
              variant="outlined"
              startIcon={<Add />}
              onClick={() =>
                setFormData({
                  ...formData,
                  occurrences: [...formData.occurrences, ""],
                })
              }
            >
              Add Location
            </Button>
          </Box>
        );
      case 5:
        return (
          <ReactQuill
            theme="snow"
            modules={{
              toolbar: toolbarOptions,
            }}
            value={formData.resources}
            onChange={(val) => setFormData({ ...formData, resources: val })}
          />
        );
      default:
        return null;
    }
  };

  return (
    <Box
      sx={{
        width: "100%",
        height: "100%",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Typography variant="h6" gutterBottom sx={{ py: 1 }}>
        Vulnerability Section
      </Typography>
      <Divider />
      <Box sx={{ pt: 5 }}>
        <Stepper activeStep={activeStep} alternativeLabel>
          {steps.map((label, index) => (
            <Step
              key={label}
              onClick={() => {
                if (index > 0 && !formData.exploitId) {
                  alert("Please select an exploit first.");
                  return;
                }
                setActiveStep(index);
              }}
              disabled={index > 0 && !formData.exploitId}
            >
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>
      </Box>

      <Box sx={{ p: 2, flex: "auto", overflowY: "auto" }}>
        {renderStepContent(activeStep)}
      </Box>
      <Divider />
      <Box sx={{ display: "flex", justifyContent: "space-between", p: 2 }}>
        <Button disabled={activeStep === 0} onClick={handleBack}>
          Back
        </Button>
        {activeStep < steps.length - 1 ? (
          <Button onClick={handleNext}>Next</Button>
        ) : (
          <Button
            variant="contained"
            color="primary"
            onClick={() => console.log(formData)}
          >
            Confirm
          </Button>
        )}
      </Box>
    </Box>
  );
};

export default AddVulnerabilityForm;
